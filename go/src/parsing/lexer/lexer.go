// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"mlr/src/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 324
	NumSymbols = 550
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '"'
3: '"'
4: 'i'
5: 'r'
6: '"'
7: '"'
8: '0'
9: 'x'
10: '0'
11: 'b'
12: '.'
13: '.'
14: '-'
15: '.'
16: '.'
17: '-'
18: '.'
19: '.'
20: '-'
21: 'M'
22: '_'
23: 'P'
24: 'I'
25: 'M'
26: '_'
27: 'E'
28: 'n'
29: 'u'
30: 'l'
31: 'l'
32: 'I'
33: 'P'
34: 'S'
35: 'I'
36: 'F'
37: 'S'
38: 'I'
39: 'R'
40: 'S'
41: 'O'
42: 'P'
43: 'S'
44: 'O'
45: 'F'
46: 'S'
47: 'O'
48: 'R'
49: 'S'
50: 'F'
51: 'L'
52: 'A'
53: 'T'
54: 'S'
55: 'E'
56: 'P'
57: 'N'
58: 'F'
59: 'N'
60: 'R'
61: 'F'
62: 'N'
63: 'R'
64: 'F'
65: 'I'
66: 'L'
67: 'E'
68: 'N'
69: 'A'
70: 'M'
71: 'E'
72: 'F'
73: 'I'
74: 'L'
75: 'E'
76: 'N'
77: 'U'
78: 'M'
79: 'E'
80: 'N'
81: 'V'
82: 'b'
83: 'e'
84: 'g'
85: 'i'
86: 'n'
87: 'd'
88: 'o'
89: 'e'
90: 'l'
91: 'i'
92: 'f'
93: 'e'
94: 'l'
95: 's'
96: 'e'
97: 'e'
98: 'n'
99: 'd'
100: 'f'
101: 'i'
102: 'l'
103: 't'
104: 'e'
105: 'r'
106: 'f'
107: 'o'
108: 'r'
109: 'i'
110: 'f'
111: 'i'
112: 'n'
113: 'w'
114: 'h'
115: 'i'
116: 'l'
117: 'e'
118: 'b'
119: 'r'
120: 'e'
121: 'a'
122: 'k'
123: 'c'
124: 'o'
125: 'n'
126: 't'
127: 'i'
128: 'n'
129: 'u'
130: 'e'
131: 'r'
132: 'e'
133: 't'
134: 'u'
135: 'r'
136: 'n'
137: 'f'
138: 'u'
139: 'n'
140: 'c'
141: 's'
142: 'u'
143: 'b'
144: 'r'
145: 'c'
146: 'a'
147: 'l'
148: 'l'
149: 'a'
150: 'r'
151: 'r'
152: 'b'
153: 'o'
154: 'o'
155: 'l'
156: 'f'
157: 'l'
158: 'o'
159: 'a'
160: 't'
161: 'i'
162: 'n'
163: 't'
164: 'm'
165: 'a'
166: 'p'
167: 'n'
168: 'u'
169: 'm'
170: 's'
171: 't'
172: 'r'
173: 'v'
174: 'a'
175: 'r'
176: 'u'
177: 'n'
178: 's'
179: 'e'
180: 't'
181: 'd'
182: 'u'
183: 'm'
184: 'p'
185: 'e'
186: 'd'
187: 'u'
188: 'm'
189: 'p'
190: 'e'
191: 'm'
192: 'i'
193: 't'
194: 'e'
195: 'm'
196: 'i'
197: 't'
198: 'p'
199: 'e'
200: 'm'
201: 'i'
202: 't'
203: 'f'
204: 'e'
205: 'p'
206: 'r'
207: 'i'
208: 'n'
209: 't'
210: 'e'
211: 'p'
212: 'r'
213: 'i'
214: 'n'
215: 't'
216: 'n'
217: 'p'
218: 'r'
219: 'i'
220: 'n'
221: 't'
222: 'p'
223: 'r'
224: 'i'
225: 'n'
226: 't'
227: 'n'
228: 't'
229: 'e'
230: 'e'
231: 's'
232: 't'
233: 'd'
234: 'o'
235: 'u'
236: 't'
237: 's'
238: 't'
239: 'd'
240: 'e'
241: 'r'
242: 'r'
243: '$'
244: '$'
245: '{'
246: '}'
247: '$'
248: '*'
249: '@'
250: '@'
251: '{'
252: '}'
253: '@'
254: '*'
255: 'a'
256: 'l'
257: 'l'
258: '%'
259: '%'
260: '%'
261: 'p'
262: 'a'
263: 'n'
264: 'i'
265: 'c'
266: '%'
267: '%'
268: '%'
269: ';'
270: '{'
271: '}'
272: '='
273: '>'
274: '>'
275: '>'
276: '|'
277: ','
278: '('
279: ')'
280: '$'
281: '['
282: ']'
283: '$'
284: '['
285: '['
286: '$'
287: '['
288: '['
289: '['
290: '@'
291: '['
292: '|'
293: '|'
294: '='
295: '^'
296: '^'
297: '='
298: '&'
299: '&'
300: '='
301: '?'
302: '?'
303: '='
304: '?'
305: '?'
306: '?'
307: '='
308: '|'
309: '='
310: '&'
311: '='
312: '^'
313: '='
314: '<'
315: '<'
316: '='
317: '>'
318: '>'
319: '='
320: '>'
321: '>'
322: '>'
323: '='
324: '+'
325: '='
326: '.'
327: '='
328: '-'
329: '='
330: '*'
331: '='
332: '/'
333: '='
334: '/'
335: '/'
336: '='
337: '%'
338: '='
339: '*'
340: '*'
341: '='
342: '?'
343: ':'
344: '|'
345: '|'
346: '^'
347: '^'
348: '&'
349: '&'
350: '?'
351: '?'
352: '?'
353: '?'
354: '?'
355: '='
356: '~'
357: '!'
358: '='
359: '~'
360: '='
361: '='
362: '!'
363: '='
364: '>'
365: '='
366: '<'
367: '<'
368: '='
369: '^'
370: '&'
371: '<'
372: '<'
373: '>'
374: '>'
375: '>'
376: '+'
377: '-'
378: '.'
379: '+'
380: '.'
381: '-'
382: '.'
383: '*'
384: '/'
385: '/'
386: '/'
387: '%'
388: '.'
389: '*'
390: '.'
391: '/'
392: '.'
393: '/'
394: '/'
395: '!'
396: '~'
397: '*'
398: '*'
399: '['
400: '['
401: '['
402: '['
403: '['
404: '['
405: '_'
406: '_'
407: ' '
408: '!'
409: '#'
410: '$'
411: '%'
412: '&'
413: '''
414: '\'
415: '('
416: ')'
417: '*'
418: '+'
419: ','
420: '-'
421: '.'
422: '/'
423: ':'
424: ';'
425: '<'
426: '='
427: '>'
428: '?'
429: '@'
430: '['
431: ']'
432: '^'
433: '_'
434: '`'
435: '{'
436: '|'
437: '}'
438: '~'
439: '\'
440: '\'
441: '\'
442: '"'
443: '\'
444: '['
445: '\'
446: ']'
447: '\'
448: 'b'
449: '\'
450: 'f'
451: '\'
452: 'n'
453: '\'
454: 'r'
455: '\'
456: 't'
457: '\'
458: 'x'
459: '\'
460: '.'
461: '\'
462: '*'
463: '\'
464: '0'
465: '\'
466: '1'
467: '\'
468: '2'
469: '\'
470: '3'
471: '\'
472: '4'
473: '\'
474: '5'
475: '\'
476: '6'
477: '\'
478: '7'
479: '\'
480: '8'
481: '\'
482: '9'
483: 'e'
484: 'E'
485: 't'
486: 'r'
487: 'u'
488: 'e'
489: 'f'
490: 'a'
491: 'l'
492: 's'
493: 'e'
494: ' '
495: '!'
496: '#'
497: '$'
498: '%'
499: '&'
500: '''
501: '\'
502: '('
503: ')'
504: '*'
505: '+'
506: ','
507: '-'
508: '.'
509: '/'
510: ':'
511: ';'
512: '<'
513: '='
514: '>'
515: '?'
516: '@'
517: '['
518: ']'
519: '^'
520: '_'
521: '`'
522: '|'
523: '~'
524: '\'
525: '{'
526: '\'
527: '}'
528: ' '
529: '\t'
530: '\n'
531: '\r'
532: '#'
533: '\n'
534: 'a'-'z'
535: 'A'-'Z'
536: '0'-'9'
537: '0'-'9'
538: 'a'-'f'
539: 'A'-'F'
540: '0'-'1'
541: 'A'-'Z'
542: 'a'-'z'
543: '0'-'9'
544: \u0100-\U0010ffff
545: 'A'-'Z'
546: 'a'-'z'
547: '0'-'9'
548: \u0100-\U0010ffff
549: .
*/
